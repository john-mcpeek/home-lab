## template: jinja
#Cloud-config
merge_how:
  - name: list
    settings: [ append ]
  - name: dict
    settings: [ no_replace, recurse_list ]

packages:
  - dnsutils

write_files:
  - path: /etc/ddns-key.conf
    owner: root:root
    permissions: '0600'
    content: |
      key "ddns-key" {
        algorithm hmac-sha256;
        secret "${DDNS_KEY}";
      };
  - path: /etc/netplan/01-netcfg.yaml
    owner: root:root
    permissions: '0644'
    content: |
      network:
        version: 2
        renderer: networkd  # Uses systemd-networkd
        ethernets:
          eth0:
            dhcp4: true
  - path: /etc/systemd/network/20-wired.network
    owner: root:root
    permissions: '0644'
    content: |
      [Match]
      Name=eth0

      [Network]
      DHCP=yes

      [DHCP]
      RouteMetric=100

      [Execute]
      # Run on IP config (similar to exit hook)
      Exec=/bin/bash -c 'if [ -n "%i" ]; then export interface=%i; /usr/local/bin/ddns-update.sh; fi'
  - path: /usr/local/bin/ddns-update.sh
    permissions: '0744'
    content: |
      #!/bin/sh
      
      echo "$(date) - DDNS update hook started" >> /tmp/ddns-hook.log
      echo "$(date) - Interface: $interface, ADDRESS: $ADDRESS" >> /tmp/ddns-hook.log

      DNS_SERVER=${NODE_IP}
      ZONE=lab
      KEYFILE=/etc/ddns-key.conf
      HOSTNAME=$(hostname)
      TTL=600      
      
      if [ -n "$ADDRESS" ]; then
        export IP=${ADDRESS%%/*}
        echo "$(date) - IP: $IP" >> /tmp/ddns-hook.log
        logger -t ddns-update "Running DDNS update for $interface with IP $IP"
        nsupdate -k $KEYFILE <<EOF
      server $DNS_SERVER
      zone $ZONE
      update delete $HOSTNAME.$ZONE A
      update add $HOSTNAME.$ZONE $TTL A $IP
      send
      EOF
      
        echo "DNS update complete: $HOSTNAME.$ZONE A $IP, status: $?" >> /tmp/ddns-hook.log
      fi
      
      echo "$(date) - DDNS update hook completed" >> /tmp/ddns-hook.log
      logger -t ddns-update "DDNS update hook completed"
